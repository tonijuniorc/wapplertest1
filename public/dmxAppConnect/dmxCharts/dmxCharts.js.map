{"version":3,"sources":["components/chart.js"],"names":["dmx","Component","attributes","width","type","Number","default","height","responsive","Boolean","String","enum","colors","Array","legend","data","labels","nogrid","points","pointStyle","pointSize","smooth","thickness","dashed","stacked","multicolor","cutout","noanimation","fullbar","labelX","labelY","colors1","colors2","colors3","colors4","colors5","colors6","colors7","colors8","colors9","render","node","this","$node","document","createElement","from","forEach","attr","name","startsWith","setAttribute","value","dom","replace","props","datasets","getDatasets","performUpdate","updatedProps","that","chartType","options","layout","padding","plugins","display","tooltip","callbacks","label","tooltipItem","dataset","tooltipExpression","parse","DataScope","$label","$value","dataIndex","chart","isArray","slice","formattedValue","animation","duration","hover","animationDuration","position","scales","x","grid","y","beginAtZero","i","color","Object","assign","fill","lineTension","backgroundColor","borderWidth","borderColor","borderDash","pointBackgroundColor","pointBorderColor","pointBorderWidth","pointHitRadius","pointRadius","pointHoverRadius","indexAxis","map","barPercentage","categoryPercentage","scale","cutoutPercentage","ticks","callback","index","values","$index","getLabelForValue","JSON","stringify","clone","getData","destroy","Chart","needUpdate","length","prop","update","hasAttribute","push","getAttribute","dataExpression","items","repeatItems","getLabels"],"mappings":"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","file":"dmxCharts.js","sourcesContent":["dmx.Component('chart', {\r\n\r\n  attributes: {\r\n    width: {\r\n      type: Number,\r\n      default: 800,\r\n    },\r\n\r\n    height: {\r\n      type: Number,\r\n      default: 600,\r\n    },\r\n\r\n    responsive: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    type: {\r\n      type: String,\r\n      default: 'line',\r\n      enum: ['line', 'area', 'bar', 'horizontalBar', 'pie', 'doughnut', 'radar', 'polarArea'],\r\n    },\r\n\r\n    colors: {\r\n      type: [String, Array],\r\n      default: 'default',\r\n    },\r\n\r\n    legend: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    data: {\r\n      type: Array,\r\n      default: [],\r\n    },\r\n\r\n    labels: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    nogrid: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    points: {\r\n      // line/area/radar\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    pointStyle: {\r\n      // line/area/radar\r\n      type: String,\r\n      default: 'circle',\r\n      enum: ['circle', 'cross', 'crossRot', 'dash', 'line', 'rect', 'rectRounded', 'rectRot', 'star', 'triangle'],\r\n    },\r\n\r\n    pointSize: {\r\n      // line/area/radar\r\n      type: String,\r\n      default: 3,\r\n    },\r\n\r\n    smooth: {\r\n      // line/area/radar (smooth lines)\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    thickness: {\r\n      // all\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n\r\n    dashed: {\r\n      // line/area/radar\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    stacked: {\r\n      // line/area/bar/horizontalBar\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    multicolor: {\r\n      // bar/horizontalBar\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    cutout: {\r\n      // doughnut\r\n      type: Number,\r\n      default: 50, // percent\r\n    },\r\n\r\n    noanimation: {\r\n      // all\r\n      type: Boolean,\r\n      default: false, // disable animations\r\n    },\r\n\r\n    fullbar: {\r\n      // bar/horizontalBar\r\n      type: Boolean,\r\n      default: false, // make bars full size\r\n    },\r\n\r\n    labelX: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n\r\n    labelY: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n  },\r\n\r\n  colors: {\r\n    default: ['#1c9f8d', '#d94712', '#2d81b9', '#1aa042', '#ad1999', '#d89515', '#d83148', '#7e2dad', '#828280', '#ad312f', '#1c9f8d', '#d94712', '#2d81b9', '#1aa042', '#ad1999', '#d89515', '#d83148', '#7e2dad', '#828280', '#ad312f'],\r\n    colors1: ['#5DA5DA', '#FAA43A', '#60BD68', '#F17CB0', '#B2912F', '#B276B2', '#DECF3F', '#F15854', '#4D4D4D', '#5DA5DA', '#FAA43A', '#60BD68', '#F17CB0', '#B2912F', '#B276B2', '#DECF3F', '#F15854', '#4D4D4D'],\r\n    colors2: ['#5cbae6', '#b6d957', '#fac364', '#d998cb', '#f2d249', '#93b9c6', '#ccc5a8', '#52bacc', '#98aafb', '#5cbae6', '#b6d957', '#fac364', '#d998cb', '#f2d249', '#93b9c6', '#ccc5a8', '#52bacc', '#98aafb'],\r\n    colors3: ['#3678b3', '#f47d0d', '#479f2f', '#ca2227', '#9068bc', '#87564b', '#da77c1', '#7f7f7f', '#bbbc26', '#4bbfcf', '#3678b3', '#f47d0d', '#479f2f', '#ca2227', '#9068bc', '#87564b', '#da77c1', '#7f7f7f', '#bbbc26', '#4bbfcf'],\r\n    colors4: ['#b1c7e8', '#f8b978', '#a2df8b', '#f69795', '#c3b0d5', '#bf9b94', '#f1b5d2', '#c7c7c7', '#dbda8e', '#a6dae5', '#b1c7e8', '#f8b978', '#a2df8b', '#f69795', '#c3b0d5', '#bf9b94', '#f1b5d2', '#c7c7c7', '#dbda8e', '#a6dae5'],\r\n    colors5: ['#3a3d79', '#66793a', '#886c32', '#7e3c39', '#764273', '#4383bd', '#db520a', '#4ba355', '#746cb0', '#636363', '#3a3d79', '#66793a', '#886c32', '#7e3c39', '#764273', '#4383bd', '#db520a', '#4ba355', '#746cb0', '#636363'],\r\n    colors6: ['#5356a2', '#8ea153', '#b99d3b', '#a5484a', '#9e5293', '#76afd6', '#f38b3c', '#80c377', '#9e9ac8', '#969696', '#5356a2', '#8ea153', '#b99d3b', '#a5484a', '#9e5293', '#76afd6', '#f38b3c', '#80c377', '#9e9ac8', '#969696'],\r\n    colors7: ['#6c70ce', '#b8ce6c', '#e2b853', '#cc606b', '#c66ebc', '#a4cae1', '#f5ac6b', '#a8d99b', '#bcbddc', '#bdbdbd', '#6c70ce', '#b8ce6c', '#e2b853', '#cc606b', '#c66ebc', '#a4cae1', '#f5ac6b', '#a8d99b', '#bcbddc', '#bdbdbd'],\r\n    colors8: ['#9c9fde', '#cfda9c', '#e4ca94', '#df959b', '#d89ed5', '#c9dbef', '#f8cfa2', '#cbe9c0', '#dadaeb', '#d9d9d9', '#9c9fde', '#cfda9c', '#e4ca94', '#df959b', '#d89ed5', '#c9dbef', '#f8cfa2', '#cbe9c0', '#dadaeb', '#d9d9d9'],\r\n    colors9: ['#f44336', '#8bc34a', '#03a9f4', '#ffc107', '#e91e63', '#cddc39', '#00bcd4', '#ff9800', '#9c27b0', '#009688', '#f44336', '#8bc34a', '#03a9f4', '#ffc107', '#e91e63', '#cddc39', '#00bcd4', '#ff9800', '#9c27b0', '#009688'],\r\n  },\r\n\r\n  render (node) {\r\n    this.$node = document.createElement(\"canvas\");\r\n    //this.$node.setAttribute(\"width\", this.props.width);\r\n    //this.$node.setAttribute(\"height\", this.props.height);\r\n    //this.$node.id = this.name;\r\n\r\n    Array.from(node.attributes).forEach(attr => {\r\n      if (!attr.name.startsWith(\"dmx-\")) {\r\n        this.$node.setAttribute(attr.name, attr.value);\r\n      }\r\n    });\r\n\r\n    dmx.dom.replace(node, this.$node);\r\n\r\n    if (typeof this.props.colors == \"string\") {\r\n      this.props.colors = this.colors[this.props.colors] || this.colors.default;\r\n    }\r\n\r\n    this.datasets = this.getDatasets(node);\r\n\r\n    this.performUpdate();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    var that = this;\r\n    var chartType = this.props.type;\r\n    var options = {\r\n      type:\r\n        chartType == \"area\"\r\n          ? \"line\"\r\n          : chartType == \"horizontalBar\"\r\n          ? \"bar\"\r\n          : chartType,\r\n      options: {\r\n        responsive: this.props.responsive,\r\n        layout: { padding: 5 },\r\n        plugins: {\r\n          legend: { display: false },\r\n          tooltip: {\r\n            callbacks: {\r\n              label: function (tooltipItem) {\r\n                var dataset = tooltipItem.dataset; //data.datasets[tooltipItem.datasetIndex];\r\n\r\n                if (dataset.tooltipExpression) {\r\n                  return dmx.parse(\r\n                    dataset.tooltipExpression,\r\n                    new dmx.DataScope(\r\n                      {\r\n                        $label: dataset.label,\r\n                        $value: dataset.data[tooltipItem.dataIndex],\r\n                      },\r\n                      that\r\n                    )\r\n                  );\r\n                }\r\n\r\n                if (chartType == \"doughnut\" || chartType == \"pie\") {\r\n                  var label = that.chart.data.labels[tooltipItem.dataIndex];\r\n                  var value = \": \" + dataset.data[tooltipItem.dataIndex];\r\n\r\n                  if (Array.isArray(label)) {\r\n                    label = label.slice();\r\n                    label[0] += value;\r\n                  } else {\r\n                    label += value;\r\n                  }\r\n\r\n                  return label;\r\n                } else if (chartType == \"palarArea\") {\r\n                  return (\r\n                    that.chart.data.labels[tooltipItem.dataIndex] + \": \" + tooltipItem.label\r\n                  );\r\n                } else {\r\n                  var label = dataset.label || \"\";\r\n                  if (label) {\r\n                    label += \": \";\r\n                  }\r\n\r\n                  var value = tooltipItem.formattedValue;\r\n                  if (value != null) {\r\n                    label += value;\r\n                  } else {\r\n                    label += tooltipItem.label;\r\n                  }\r\n\r\n                  return label;\r\n                }\r\n              },\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n\r\n    if (typeof this.props.colors == \"string\") {\r\n      this.props.colors = this.colors[this.props.colors] || this.colors.default;\r\n    }\r\n\r\n    if (this.props.noanimation) {\r\n      options.options.animation = { duration: 0 };\r\n      options.options.hover = { animationDuration: 0 };\r\n    }\r\n\r\n    if (this.props.legend) {\r\n      options.options.plugins.legend.display = true;\r\n      options.options.plugins.legend.position = this.props.legend;\r\n    }\r\n\r\n    if (this.props.type == \"line\" || this.props.type == \"area\") {\r\n      options.options.scales = {\r\n        x: {\r\n          grid: { display: !this.props.nogrid },\r\n        },\r\n        y: {\r\n          grid: { display: !this.props.nogrid },\r\n          stacked: this.props.stacked,\r\n          beginAtZero: true,\r\n        },\r\n      };\r\n\r\n      this.datasets.forEach(function (dataset, i) {\r\n        var color = this.props.colors[i];\r\n\r\n        Object.assign(dataset, {\r\n          fill: this.props.type == \"area\",\r\n          lineTension: this.props.smooth ? 0.4 : 0,\r\n          backgroundColor: color + \"80\", //Color(color).alpha(0.5).rgbaString(),\r\n          borderWidth: +this.props.thickness,\r\n          borderColor: color,\r\n          borderDash: this.props.dashed ? [5, 5] : [],\r\n          pointStyle: this.props.pointStyle,\r\n          pointBackgroundColor: color,\r\n          pointBorderColor: color,\r\n          pointBorderWidth: 1,\r\n          pointHitRadius: 10,\r\n          pointRadius: this.props.points ? +this.props.pointSize : 0,\r\n          pointHoverRadius: +this.props.pointSize,\r\n        });\r\n      }, this);\r\n    }\r\n\r\n    if (this.props.type == \"bar\" || this.props.type == \"horizontalBar\") {\r\n      options.options.indexAxis =\r\n        this.props.type == \"horizontalBar\" ? \"y\" : \"x\";\r\n\r\n      options.options.scales = {\r\n        x: {\r\n          grid: { display: !this.props.nogrid },\r\n          stacked: this.props.stacked,\r\n          beginAtZero: true,\r\n        },\r\n        y: {\r\n          grid: { display: !this.props.nogrid },\r\n          stacked: this.props.stacked,\r\n          beginAtZero: true,\r\n        },\r\n      };\r\n\r\n      this.datasets.forEach(function (dataset, i) {\r\n        var color = this.props.colors[i];\r\n\r\n        Object.assign(dataset, {\r\n          backgroundColor: this.props.multicolor\r\n            ? this.props.colors.map(function (color) {\r\n                return color + \"80\";\r\n              })\r\n            : color + \"80\",\r\n          borderColor: this.props.multicolor ? this.props.colors : color,\r\n          borderDash: this.props.dashed ? [5, 5] : [],\r\n          borderWidth: +this.props.thickness,\r\n          barPercentage: this.props.fullbar ? 1 : 0.9,\r\n          categoryPercentage: this.props.fullbar ? 1 : 0.8,\r\n        });\r\n      }, this);\r\n    }\r\n\r\n    if (this.props.type == \"polarArea\" || this.props.type == \"radar\") {\r\n      options.options.scale = {\r\n        grid: { display: !this.props.nogrid },\r\n        beginAtZero: true,\r\n      };\r\n\r\n      this.datasets.forEach(function (dataset, i) {\r\n        var color = this.props.colors[i];\r\n\r\n        Object.assign(dataset, {\r\n          fill: true,\r\n          lineTension: this.props.smooth ? 0.4 : 0,\r\n          borderWidth: +this.props.thickness,\r\n          borderDash: this.props.dashed ? [5, 5] : [],\r\n          borderColor:\r\n            this.props.type == \"polarArea\" ? this.props.colors : color,\r\n          backgroundColor:\r\n            this.props.type == \"polarArea\"\r\n              ? this.props.colors.map(function (color) {\r\n                  return color + \"50\";\r\n                })\r\n              : color + \"50\",\r\n          pointStyle: this.props.pointStyle,\r\n          pointBackgroundColor:\r\n            this.props.type == \"polarArea\" ? this.props.colors : color,\r\n          pointBorderColor:\r\n            this.props.type == \"polarArea\" ? this.props.colors : color,\r\n          pointBorderWidth: 1,\r\n          pointHitRadius: 10,\r\n          pointRadius: this.props.points ? +this.props.pointSize : 0,\r\n          pointHoverRadius: +this.props.pointSize,\r\n        });\r\n      }, this);\r\n    }\r\n\r\n    if (this.props.type == \"pie\" || this.props.type == \"doughnut\") {\r\n      this.datasets.forEach(function (dataset, i) {\r\n        var color = this.props.colors[i];\r\n\r\n        Object.assign(dataset, {\r\n          backgroundColor: this.props.colors.map(function (color) {\r\n            return color + \"80\";\r\n          }),\r\n          borderColor: this.props.colors,\r\n          borderWidth: +this.props.thickness,\r\n        });\r\n      }, this);\r\n    }\r\n\r\n    if (this.props.type == \"doughnut\") {\r\n      options.options.cutoutPercentage = this.props.cutout;\r\n    }\r\n\r\n    if (this.props.labelX && options.options && options.options.scales) {\r\n      options.options.scales.x.ticks = {\r\n        callback: function (value, index, values) {\r\n          var label = dmx.parse(\r\n            that.props.labelX,\r\n            new dmx.DataScope({ $value: value, $index: index }, that)\r\n          );\r\n          if (label != null) {\r\n            return label;\r\n          }\r\n          return this.getLabelForValue(value);\r\n        },\r\n      };\r\n    }\r\n\r\n    if (this.props.labelY && options.options && options.options.scales) {\r\n      options.options.scales.y.ticks = {\r\n        callback: function (value, index, values) {\r\n          var label = dmx.parse(\r\n            that.props.labelY,\r\n            new dmx.DataScope({ $value: value, $index: index }, that)\r\n          );\r\n          if (label != null) {\r\n            return label;\r\n          }\r\n          return this.getLabelForValue(value);\r\n        },\r\n      };\r\n    }\r\n\r\n    if (JSON.stringify(options) != JSON.stringify(this.options)) {\r\n      if (this.props.type) {\r\n        this.options = dmx.clone(options);\r\n\r\n        options.data = this.getData();\r\n\r\n        if (this.chart) this.chart.destroy();\r\n        this.chart = new Chart(this.$node, dmx.clone(options));\r\n      }\r\n    } else if (this.chart) {\r\n      var data = this.getData();\r\n      var needUpdate = false;\r\n\r\n      if (\r\n        JSON.stringify(this.chart.data.labels) != JSON.stringify(data.labels)\r\n      ) {\r\n        this.chart.data.labels = data.labels;\r\n        needUpdate = true;\r\n      }\r\n\r\n      if (data.datasets.length != this.chart.data.datasets.length) {\r\n        this.chart.data.datasets = data.datasets;\r\n        needUpdate = true;\r\n      } else {\r\n        data.datasets.forEach(function (dataset, i) {\r\n          [\r\n            \"label\",\r\n            \"backgroundColor\",\r\n            \"borderColor\",\r\n            \"borderWidth\",\r\n            \"dataExpression\",\r\n            \"tooltipExpression\",\r\n            \"data\",\r\n          ].forEach(function (prop) {\r\n            if (\r\n              JSON.stringify(this.chart.data.datasets[i][prop]) !=\r\n              JSON.stringify(dataset[prop])\r\n            ) {\r\n              this.chart.data.datasets[i][prop] = dataset[prop];\r\n              needUpdate = true;\r\n            }\r\n          }, this);\r\n        }, this);\r\n      }\r\n\r\n      if (needUpdate) {\r\n        this.chart.update();\r\n      }\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    if (this.chart) this.chart.destroy();\r\n  },\r\n\r\n  getDatasets (node) {\r\n    var datasets = [];\r\n\r\n    for (var i = 1; i <= 20; i++) {\r\n      if (node.hasAttribute(\"dataset-\" + i + \":value\")) {\r\n        datasets.push({\r\n          label: node.hasAttribute(\"dataset-\" + i + \":label\")\r\n            ? node.getAttribute(\"dataset-\" + i + \":label\")\r\n            : \"dataset \" + i,\r\n          backgroundColor: this.props.colors.map(function (color) {\r\n            return color + \"80\";\r\n          }),\r\n          borderColor: this.props.colors,\r\n          borderWidth: 1,\r\n          dataExpression: node.getAttribute(\"dataset-\" + i + \":value\"),\r\n          tooltipExpression: node.getAttribute(\"dataset-\" + i + \":tooltip\"),\r\n          data: [],\r\n        });\r\n      }\r\n    }\r\n\r\n    return datasets;\r\n  },\r\n\r\n  getData () {\r\n    this.datasets.map(function (dataset) {\r\n      var items = dmx.repeatItems(this.props.data);\r\n\r\n      dataset.data = items.map(function (data) {\r\n        return +dmx.parse(\r\n          dataset.dataExpression,\r\n          new dmx.DataScope(data, this)\r\n        );\r\n      }, this);\r\n\r\n      return [];\r\n    }, this);\r\n\r\n    return {\r\n      labels: this.getLabels(),\r\n      datasets: this.datasets,\r\n    };\r\n  },\r\n\r\n  getLabels () {\r\n    var items = dmx.repeatItems(this.props.data);\r\n\r\n    return items.map(function (data, index) {\r\n      if (this.props.labels) {\r\n        return dmx.parse(this.props.labels, new dmx.DataScope(data, this));\r\n      } else {\r\n        return \"value \" + (index + 1);\r\n      }\r\n    }, this);\r\n  },\r\n\r\n});\r\n"]}